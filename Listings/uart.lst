C51 COMPILER V9.60.0.0   UART                                                              10/05/2022 21:56:44 PAGE 1   


C51 COMPILER V9.60.0.0, COMPILATION OF MODULE UART
OBJECT MODULE PLACED IN .\Objects\uart.obj
COMPILER INVOKED BY: D:\Keil_v5\C51\BIN\C51.EXE uart.c OPTIMIZE(8,SPEED) BROWSE DEBUG OBJECTEXTEND PRINT(.\Listings\uart
                    -.lst) TABS(2) OBJECT(.\Objects\uart.obj)

line level    source

   1          #include "uart.h"
   2          #include <string.h>
   3          
   4          #define Uart1_Buf_Max 20               //串口数据缓存长度
   5          u8 idata  Uart1_Rec_Buf[Uart1_Buf_Max];  //串口数据缓存
   6          u8 point1 = 0;             //绶存指针
   7          
   8          #define Uart2_Buf_Max 20               //串口数据缓存长度
   9          u8 xdata  Uart2_Rec_Buf[Uart2_Buf_Max];  //串口数据缓存
  10          u8 point2 = 0;             //绶存指针
  11          bit B_TX2_Busy = 0; //发送忙标志
  12          
  13          #define Uart3_Buf_Max 20               //串口数据缓存长度
  14          u8 xdata  Uart3_Rec_Buf[Uart3_Buf_Max];  //串口数据缓存
  15          u8 point3 = 0;             //绶存指针
  16          bit B_TX3_Busy = 0; //发送忙标志
  17          
  18          #define Uart4_Buf_Max 20               //串口数据缓存长度
  19          u8 xdata  Uart4_Rec_Buf[Uart4_Buf_Max];  //串口数据缓存
  20          u8 point4 = 0;             //绶存指针
  21          bit B_TX4_Busy = 0; //发送忙标志
  22          
  23          /*----------------------------
  24          延时函数
  25          ----------------------------*/
  26          void delayms(u16 ms){
  27   1        unsigned int i;
  28   1         do{
  29   2            i = MAIN_Fosc / 13000;
  30   2            while(--i)  ;   //14T per loop
  31   2           }while(--ms);
  32   1      }
  33          
  34          /*----------------------------
  35          定时器函数 STC_ISP生成
  36          ----------------------------*/
  37          void UartInit(void)   //9600bps@11.0592MHz
  38          {
  39   1      
  40   1        P3M0 &= ~(1<<7);    //设置P3.7为准双向IO
  41   1        P3M1 &= ~(1<<7);
  42   1        
  43   1        S1_USE_P36P37();
  44   1      
  45   1        PCON &= 0x7F;     //波特率不倍速
  46   1        SCON = 0x50;      //8位数据,可变波特率
  47   1        AUXR |= 0x40;     //定时器时钟1T模式
  48   1        AUXR &= 0xFE;     //串口1选择定时器1为波特率发生器
  49   1        TMOD &= 0x0F;     //设置定时器模式
  50   1        TMOD |= 0x20;     //设置定时器模式
  51   1        TL1 = 0xDC;       //设置定时初始值
  52   1        TH1 = 0xDC;       //设置定时重载值
  53   1        ET1 = 0;          //禁止定时器%d中断
  54   1        TR1 = 1;          //定时器1开始计时
C51 COMPILER V9.60.0.0   UART                                                              10/05/2022 21:56:44 PAGE 2   

  55   1      
  56   1        S2CON = 0x50;     //8位数据,可变波特率
  57   1        AUXR |= 0x04;     //定时器时钟1T模式
  58   1        T2L = 0xE0;       //设置定时初始值
  59   1        T2H = 0xFE;       //设置定时初始值
  60   1        AUXR |= 0x10;     //定时器2开始计时
  61   1      
  62   1        S3CON = 0x10;     //8位数据,可变波特率
  63   1        S3CON |= 0x40;    //串口3选择定时器3为波特率发生器
  64   1        T4T3M |= 0x02;    //定时器时钟1T模式
  65   1        T3L = 0xE0;       //设置定时初始值
  66   1        T3H = 0xFE;       //设置定时初始值
  67   1        T4T3M |= 0x08;    //定时器3开始计时
  68   1      
  69   1        S4CON = 0x10;     //8位数据,可变波特率
  70   1        S4CON |= 0x40;    //串口4选择定时器4为波特率发生器
  71   1        T4T3M |= 0x20;    //定时器时钟1T模式
  72   1        T4L = 0xE0;       //设置定时初始值
  73   1        T4H = 0xFE;       //设置定时初始值
  74   1        T4T3M |= 0x80;    //定时器4开始计时
  75   1      
  76   1        UART2_INT_ENABLE();     //允许串口2中断
  77   1        UART3_INT_ENABLE();     //允许串口3中断
  78   1        UART4_INT_ENABLE();     //允许串口4中断
  79   1      
  80   1        ES = 1;         //开启中断
  81   1        EA = 1;         //允许中断
  82   1      }
  83          
  84          /*----------------------------
  85          通过串口1发送串口数据
  86          ----------------------------*/
  87          void Uart1_SendData(unsigned char ch){
  88   1          SBUF = ch;                 //写数据到UART数据寄存器
  89   1          while(TI == 0);
  90   1          TI = 0;
  91   1      }
  92          
  93          /*----------------------------
  94          通过串口1发送串口字符串
  95          ----------------------------*/
  96          void Uart1_SendString(char *s){
  97   1          while (*s){                  //检测字符串结束标志
  98   2            Uart1_SendData(*s++);         //发送当前字符
  99   2          }
 100   1      }
 101          
 102          /*----------------------------
 103          串口命令识别函数
 104          ----------------------------*/
 105          bit  Uart1_Hand(unsigned char *a){
 106   1        if(strstr(Uart1_Rec_Buf,a)!=NULL)
 107   1          return 1;
 108   1        else
 109   1          return 0;
 110   1      }
 111          
 112          /*----------------------------
 113          串口缓存清理
 114          ----------------------------*/
 115          void Uart1_CLR_Buf(void){
 116   1        memset(Uart1_Rec_Buf,0,Uart1_Buf_Max);
C51 COMPILER V9.60.0.0   UART                                                              10/05/2022 21:56:44 PAGE 3   

 117   1        point1 = 0;
 118   1      }
 119          
 120          /*----------------------------
 121          串口中断函数
 122          ----------------------------*/
 123          void Uart1() interrupt 4{
 124   1        ES = 0;
 125   1        if(RI){
 126   2          RI = 0;
 127   2          Uart1_Rec_Buf[point1] = SBUF;
 128   2          point1++;
 129   2          if(point1 >= Uart1_Buf_Max){
 130   3            point1 = 0;
 131   3          }
 132   2        }
 133   1        if(TI){
 134   2            TI = 0;
 135   2          }
 136   1          ES = 1;
 137   1      }
 138          
 139          /*----------------------------
 140          通过串口2发送串口数据
 141          ----------------------------*/
 142          void Uart2_SendData(unsigned char ch){
 143   1        while(B_TX2_Busy); //不忙时候发送数据
 144   1        S2BUF = ch;
 145   1        B_TX2_Busy = 1;
 146   1      }
 147          
 148          /*----------------------------
 149          通过串口2发送字符串
 150          ----------------------------*/
 151          void Uart2_SendString(char *s){
 152   1        while(*s){
 153   2          Uart2_SendData(*s++); //发送当前字符
 154   2        }
 155   1      }
 156          
 157          bit  Uart2_Hand(unsigned char *a){
 158   1        if(strstr(Uart2_Rec_Buf,a)!=NULL)
 159   1          return 1;
 160   1        else
 161   1          return 0;
 162   1      }
 163          
 164          void Uart2_CLR_Buf(void){
 165   1        memset(Uart2_Rec_Buf,0,Uart2_Buf_Max);
 166   1        point2 = 0;
 167   1      }
 168          
 169          void Uart2() interrupt 8{
 170   1        UART2_INT_DISABLE();
 171   1        if(RI2){
 172   2          CLR_RI2();
 173   2          Uart2_Rec_Buf[point2] = S2BUF;
 174   2          point2++;
 175   2          if(point2 >= Uart2_Buf_Max){
 176   3            point2 = 0;
 177   3          }
 178   2        }
C51 COMPILER V9.60.0.0   UART                                                              10/05/2022 21:56:44 PAGE 4   

 179   1        if(TI2){
 180   2          CLR_TI2();
 181   2          B_TX2_Busy = 0;
 182   2        }
 183   1        UART2_INT_ENABLE();
 184   1      }
 185          
 186          /*----------------------------
 187          通过串口3发送串口数据
 188          ----------------------------*/
 189          void Uart3_SendData(unsigned char ch){
 190   1        while(B_TX3_Busy); //不忙时候发送数据
 191   1        S3BUF = ch;
 192   1        B_TX3_Busy = 1;
 193   1      }
 194          
 195          /*----------------------------
 196          通过串口3发送字符串
 197          ----------------------------*/
 198          void Uart3_SendString(char *s){
 199   1        while(*s){
 200   2          Uart3_SendData(*s++); //发送当前字符
 201   2        }
 202   1      }
 203          
 204          bit  Uart3_Hand(unsigned char *a){
 205   1        if(strstr(Uart3_Rec_Buf,a)!=NULL)
 206   1          return 1;
 207   1        else
 208   1          return 0;
 209   1      }
 210          
 211          void Uart3_CLR_Buf(void){
 212   1        memset(Uart3_Rec_Buf,0,Uart3_Buf_Max);
 213   1        point3 = 0;
 214   1      }
 215          
 216          void Uart3() interrupt 17 {
 217   1        UART3_INT_DISABLE();
 218   1        if(RI3){
 219   2          CLR_RI3();
 220   2          Uart3_Rec_Buf[point3] = S3BUF;
 221   2          point3++;
 222   2          if(point3>=Uart3_Buf_Max){
 223   3            point3 = 0;
 224   3          }
 225   2        }
 226   1        if(TI3){
 227   2          CLR_TI3();
 228   2          B_TX3_Busy = 0;
 229   2        }
 230   1        UART3_INT_ENABLE();
 231   1      }
 232          /*----------------------------
 233          通过串口4发送串口数据
 234          ----------------------------*/
 235          void Uart4_SendData(unsigned char ch){
 236   1        while(B_TX4_Busy); //不忙时候发送数据
 237   1        S4BUF = ch;
 238   1        B_TX4_Busy = 1;
 239   1      }
 240          
C51 COMPILER V9.60.0.0   UART                                                              10/05/2022 21:56:44 PAGE 5   

 241          /*----------------------------
 242          通过串口4发送字符串
 243          ----------------------------*/
 244          void Uart4_SendString(char *s){
 245   1        while(*s){
 246   2          Uart4_SendData(*s++); //发送当前字符
 247   2        }
 248   1      }
 249          
 250          bit  Uart4_Hand(unsigned char *a){
 251   1        if(strstr(Uart4_Rec_Buf,a)!=NULL)
 252   1          return 1;
 253   1        else
 254   1          return 0;
 255   1      }
 256          
 257          void Uart4_CLR_Buf(void){
 258   1        memset(Uart4_Rec_Buf,0,Uart4_Buf_Max);
 259   1        point4 = 0;
 260   1      }
 261          
 262          void Uart4() interrupt 18 {
 263   1        UART4_INT_DISABLE();
 264   1        if(RI4){
 265   2          CLR_RI4();
 266   2          Uart4_Rec_Buf[point4] = S4BUF;
 267   2          point4++;
 268   2          if(point4>=Uart4_Buf_Max){
 269   3            point4 = 0;
 270   3          }
 271   2        }
 272   1        if(TI4){
 273   2          CLR_TI4();
 274   2          B_TX4_Busy = 0;
 275   2        }
 276   1        UART4_INT_ENABLE();
 277   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    778    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =     60    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =      4      24
   IDATA SIZE       =     20    ----
   BIT SIZE         =      3    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
